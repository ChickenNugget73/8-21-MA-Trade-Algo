#include <Trade\Trade.mqh>

input int FastMAPeriod = 8; // Period for the Fast Moving Average
input int SlowMAPeriod = 21; // Period for the Slow Moving Average
input double LotSize = 1.0; // Lot size for trading
input double TakeProfit = 100; // Take profit in Points
input double ExtraPipSL = 15; // Extra pips past the last lowest/highest candle for Stop Loss
input int LookBackCandles = 5; // Number of candles to look back for patterns
input double SupportResistanceZone = 50; // Pips to consider for support/resistance zone

CTrade trade; // Create trade object

double FastMA, SlowMA; // Moving averages

int OnInit()
{
    // Set up moving averages
    FastMA = iMA(NULL, PERIOD_H1, FastMAPeriod, 0, MODE_SMA, PRICE_CLOSE);
    SlowMA = iMA(NULL, PERIOD_H1, SlowMAPeriod, 0, MODE_SMA, PRICE_CLOSE);
    return INIT_SUCCEEDED;
}

void OnDeinit(const int reason)
{
    // No deinitialization needed
}

void OnTick()
{
    // Recalculate moving averages on the 1-hour chart
    FastMA = iMA(NULL, PERIOD_H1, FastMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 0);
    SlowMA = iMA(NULL, PERIOD_H1, SlowMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 0);

    // Check for buy conditions
    if (FastMA > SlowMA && PositionSelect(Symbol()) == false)
    {
        double stopLossPrice = CalculateStopLossPrice(true); // Calculate stop loss based on last low
        if (CheckCandlestickPattern(true) && CheckSupportResistance(false))
        {
            trade.Buy(LotSize, NULL, Ask, stopLossPrice, Ask + TakeProfit * _Point);
        }
    }

    // Check for sell conditions
    if (FastMA < SlowMA && PositionSelect(Symbol()) == false)
    {
        double stopLossPrice = CalculateStopLossPrice(false); // Calculate stop loss based on last high
        if (CheckCandlestickPattern(false) && CheckSupportResistance(true))
        {
            trade.Sell(LotSize, NULL, Bid, stopLossPrice, Bid - TakeProfit * _Point);
        }
    }
}

bool CheckCandlestickPattern(bool isBullish)
{
    double openPrice, closePrice, lowPrice, highPrice;

    // Look for reversal candlestick patterns
    for (int i = 1; i <= LookBackCandles; i++)
    {
        openPrice = iOpen(NULL, PERIOD_H1, i);
        closePrice = iClose(NULL, PERIOD_H1, i);
        lowPrice = iLow(NULL, PERIOD_H1, i);
        highPrice = iHigh(NULL, PERIOD_H1, i);

        // Bullish Patterns
        if (isBullish)
        {
            if (closePrice > openPrice && (openPrice - lowPrice) > 2 * (closePrice - openPrice))
                return true; // Bullish Hammer
        }
        // Bearish Patterns
        else
        {
            if (openPrice > closePrice && (highPrice - closePrice) > 2 * (openPrice - closePrice))
                return true; // Bearish Shooting Star
        }
    }
    return false;
}

bool CheckSupportResistance(bool isResistance)
{
    double currentPrice = iClose(NULL, PERIOD_H1, 0);
    double support = iLow(NULL, PERIOD_H1, iLowest(NULL, PERIOD_H1, MODE_LOW, 50, 1));
    double resistance = iHigh(NULL, PERIOD_H1, iHighest(NULL, PERIOD_H1, MODE_HIGH, 50, 1));

    if (isResistance)
    {
        if (MathAbs(currentPrice - resistance) <= SupportResistanceZone * _Point)
            return true; // Close to resistance
    }
    else
    {
        if (MathAbs(currentPrice - support) <= SupportResistanceZone * _Point)
            return true; // Close to support
    }
    return false;
}

double CalculateStopLossPrice(bool isBuy)
{
    double stopLossPrice;
    if (isBuy)
    {
        double lastLow = iLow(NULL, PERIOD_H1, iLowest(NULL, PERIOD_H1, MODE_LOW, 1, 1));
        stopLossPrice = lastLow - (ExtraPipSL * _Point);
    }
    else
    {
        double lastHigh = iHigh(NULL, PERIOD_H1, iHighest(NULL, PERIOD_H1, MODE_HIGH, 1, 1));
        stopLossPrice = lastHigh + (ExtraPipSL * _Point);
    }
    return stopLossPrice;
}
